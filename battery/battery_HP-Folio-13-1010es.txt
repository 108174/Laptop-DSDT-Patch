#Maintained by: RehabMan for: Laptop Patches
#battery_HP-Folio-13-1010es.txt

# created by jackito 2014-09-13

# works for:
#   HP Folio 13 1010-es

# Registers that needs to be patched:
#
# ERAM ——— 	ENIB , 16
#
# ECPR ———	BCTL , 128
#		BTDC , 64
#		BMNN , 72
#		BDVN , 56
#		MUAC , 16
#		ATTE , 16
#		RTTE , 16
#		ATTF , 16
#

# Based on offsets here:
#            OperationRegion (ECPR, EmbeddedControl, Zero, 0xFF)
#            Field (ECPR, ByteAcc, Lock, Preserve)
#            {
#               ...
#                        Offset (0x2D),
#                BCTL,   128,//2d
#                        Offset (0x88),
#                BTDC,   64,//88
#                BMNN,   72,//90
#                BDVN,   56,
#               ...
#            }

#  TNOT fix
into definitionblock code_regex External\s+\(\\TNOT\) remove_matched;
into_all all code_regex CondRefOf\s+\(\\TNOT\) replaceall_matched begin CondRefOf(TNOT) end;

# Create B1B2 Method by RehabMan
into method label B1B2 parent_label EC0 remove_entry;
into device label EC0 insert
begin
Method (B1B2, 2, NotSerialized) { Return(Or(Arg0, ShiftLeft(Arg1, 8))) }\n
end;

# Utility methods to read/write buffers from/to EC by RehabMan
into method label RE1B parent_label EC0 remove_entry;
into method label RECB parent_label EC0 remove_entry;
into device label EC0 insert
begin
Method (RE1B, 1, NotSerialized)\n
{\n
    OperationRegion(ERAM, EmbeddedControl, Arg0, 1)\n
    Field(ERAM, ByteAcc, NoLock, Preserve) { BYTE, 8 }\n
    Return(BYTE)\n
}\n
Method (RECB, 2, Serialized)\n
// Arg0 - offset in bytes from zero-based EC\n
// Arg1 - size of buffer in bits\n
{\n
    ShiftRight(Arg1, 3, Arg1)\n
    Name(TEMP, Buffer(Arg1) { })\n
    Add(Arg0, Arg1, Arg1)\n
    Store(0, Local0)\n
    While (LLess(Arg0, Arg1))\n
    {\n
        Store(RE1B(Arg0), Index(TEMP, Local0))\n
        Increment(Arg0)\n
        Increment(Local0)\n
    }\n
    Return(TEMP)\n
}\n
end;

#### 16-bit registers patch

# FAN EC (not really necessary but might be handy for fan access)
into device label EC0 code_regex ENIB,\s+16, replace_matched begin NIB0,8,NIB1,8, end;

# BATT EC
into device label EC0 code_regex MUAC,\s+16, replace_matched begin UAC0,8,UAC1,8, end;
into device label EC0 code_regex ATTE,\s+16, replace_matched begin TTE0,8,TTE1,8, end;
into device label EC0 code_regex RTTE,\s+16, replace_matched begin RTE0,8,RTE1,8, end;
into device label EC0 code_regex ATTF,\s+16, replace_matched begin TTF0,8,TTF1,8, end;

# FAN EC (not really necessary but might be handy for fan access)
into method label FANG code_regex Store\s+\(Arg0,\s+ENIB\) replace_matched 
begin
Store(ShiftRight(Arg0, 8), NIB1) Store(Arg0, NIB0)
end;

into method label FANW code_regex Store\s+\(Arg0,\s+ENIB\) replace_matched
begin
Store(ShiftRight(Arg0, 8), NIB1) Store(Arg0, NIB0)
end;

# BATT EC
into method label BATT code_regex \.MUAC, replaceall_matched begin .B1B2(^^PCI0.LPCB.EC0.UAC0,^^PCI0.LPCB.EC0.UAC1), end;
into method label BATT code_regex \.ATTE, replaceall_matched begin .B1B2(^^PCI0.LPCB.EC0.TTE0,^^PCI0.LPCB.EC0.TTE1), end;
into method label BATT code_regex \.RTTE, replaceall_matched begin .B1B2(^^PCI0.LPCB.EC0.RTE0,^^PCI0.LPCB.EC0.RTE1), end;
into method label BATT code_regex \.ATTF, replaceall_matched begin .B1B2(^^PCI0.LPCB.EC0.TTF0,^^PCI0.LPCB.EC0.TTF1), end;

#### Buffer registers patch
# BATT EC
into device label EC0 code_regex (BCTL,)\s+(128) replace_matched begin CTL0,%2,//%1%2 end;
into device label EC0 code_regex (BTDC,)\s+(64) replace_matched begin TDC0,%2,//%1%2 end;
into device label EC0 code_regex (BMNN,)\s+(72) replace_matched begin MNN0,%2,//%1%2 end;
into device label EC0 code_regex (BDVN,)\s+(56) replace_matched begin DVN0,%2,//%1%2 end;

# BATT EC
into method label BATT code_regex BCTL, replaceall_matched begin RECB(0x2D,128), end;
into method label BATT code_regex \.BTDC, replaceall_matched begin .RECB(0x88,64), end;
into method label GUBT code_regex \(BTDC, replaceall_matched begin (RECB(0x88,64), end;
into method label BATT code_regex \.BMNN, replaceall_matched begin .RECB(0x90,72), end;
into method label GUBI code_regex \(BMNN, replaceall_matched begin (RECB(0x90,72), end;
into method label BATT code_regex \.BDVN, replaceall_matched begin .RECB(0x99,56), end;
into method label GBMN code_regex \(BDVN, replaceall_matched begin (RECB(0x99,56), end;

